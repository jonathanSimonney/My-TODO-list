function createElementWithClass(tagName,arrayClassname){    var createdElement = document.createElement(tagName);    for (var i in arrayClassname){        createdElement.className += arrayClassname[i]+' ';    }    return createdElement;}function changeContent(arrayContainer, arrayColumnPath){    var newContent = document.getElementById('newContent').value;    eval('arrayColumn'+arrayColumnPath+'= newContent');    newContent = formatString(newContent);    for (var i in arrayContainer){        arrayContainer[i].innerHTML = newContent;    }    localStorage['content'] = JSON.stringify(arrayColumn);}function createArrayColumnPath(arrayKeys){    var arrayColumnPath = '';    for (var i in arrayKeys){        arrayColumnPath+= '['+arrayKeys[i]+']';    }    return arrayColumnPath;}function suppressElementsBySelector(suppressSelector){    var arrayToSuppress = document.querySelectorAll(suppressSelector);    for (var i in arrayToSuppress){        if (typeof arrayToSuppress[i].style !== 'undefined'){            arrayToSuppress[i].parentNode.removeChild(arrayToSuppress[i]);        }    }}//To suppress a list of elements with the corresponding CSS selectorfunction formatString(string,isName = true){    if (string === '' && isName) {        string = '<span class="placeholder">Click here to add a name</span>';//change class if another is preferred by Antoine.    }else{        string = string.replace('&','&amp;');        string = string.replace('<','&lt;');    }    return string;}//To format the name of a fieldfunction linkButtonOnclickEvent(button){    button['domElement'].onclick = function(){        if (button['action'] === 'close'){            submitForm(document.querySelector('.modificationForm'));            button['domElement'].parentNode.parentNode.removeChild(button['domElement'].parentNode);        }    };}function buttonInit(elementToAppend,action){    var button = {};    button['action'] = action;    button['domElement'] = createElementWithClass('span', [action+'Button']);    button['father'] = elementToAppend;    return button;}function buttonDisplay(button) {    button['domElement'].innerHTML = (button['action'] == 'validate')? '<button>' +        '<i class="fa fa-check" aria-hidden="true"></i></button>' : 'x';    button['father'].appendChild(button['domElement']);    if (window.getComputedStyle(button['father']).getPropertyValue('position') === 'static'){        button['father'].className += ' positioned';    }}function addButton(elementToAppend,action){    var button = buttonInit(elementToAppend,action);    buttonDisplay(button);    linkButtonOnclickEvent(button);    return button;}function appendChilds(father, arrayChild){    for (var i in arrayChild){        father.appendChild(arrayChild[i]);    }}function submitForm(form){    if (form !== null){        for (var i in form.childNodes){            if (typeof form.childNodes[i].className !== 'undefined'){                if (form.childNodes[i].className.search('validateButton') !== -1){                    form.childNodes[i].childNodes[0].click();                }            }        }    }}//Some functions called by openFormRename// and addColumn.function displayForm(form, placeholder = 'type your new name here'){    form['origin'].innerHTML = '';    submitForm(document.querySelector('.'+form['className']));    suppressElementsBySelector('.'+form['className']);    form['domElement'].className = form['className'];    form['origin'].appendChild(form['domElement']);    form['domElement'].innerHTML = '<textarea id="newContent" placeholder=\"'+placeholder+'\">'+form['originalContent']+'</textarea>';}function linkFormOnclickEvent(form, arrayKeys){    document.querySelector('.'+form['className']).onsubmit  = function() {        console.log(form['linkedElement']);        changeContent(form['linkedElement'], createArrayColumnPath(arrayKeys));        return false;    };}function initForm(modified,arrayKeys, arrayLinkedElement){    var form = {};    form['origin'] = modified;    form['className'] = 'modificationForm';//As usual, give classname according to what Antoine needs.    form['domElement'] = document.createElement('form');    arrayLinkedElement.push(modified);    form['linkedElement'] = arrayLinkedElement;    form['originalContent'] = eval('arrayColumn'+createArrayColumnPath(arrayKeys));    return form;}function openFormModif(modified,arrayKeys, arrayLinkedElement = []){//WARNING!!! DO NOT CALL THIS FUNCTION WITH ARRAYCOLUMNPATH AS USER INPUT                                                 // : IT IS USED IN AN EVAL STATEMENT    if (modified.innerHTML.search('<form') === -1){        var form = initForm(modified,arrayKeys, arrayLinkedElement);        displayForm(form);        document.getElementById('newContent').focus();        linkFormOnclickEvent(form, arrayKeys);        addButton(form['domElement'], 'validate');        return form;    }}//open a form to rename a fieldfunction createElementsForModale(card, column){    var modale = createElementWithClass('div', ['modale']);    var description = createElementWithClass('p', ['boxDescription']);    description.innerHTML = card['elements']['innerElements']['description'].innerHTML;    var columnTitle = createElementWithClass('h3',['title']);    columnTitle.innerHTML = column['elements']['innerElements']['title'].innerHTML;    var title = createElementWithClass('h2', ['title']);    title.innerHTML = card['elements']['innerElements']['title'].innerHTML;    return {'domElement' : modale, 'innerElements' : {'title' : title, 'columnTitle' : columnTitle, 'description' : description}};}function initModale(card, column){    var modale = {};    modale['elements'] = createElementsForModale(card, column);    appendChilds(modale['elements']['domElement'],modale['elements']['innerElements']);    addButton(modale['elements']['domElement'], 'close');    return modale;}function linkModaleOnclickEvent(modale,card, column){    modale['elements']['innerElements']['title'].onclick = function () {        openFormModif(this,[column['number'], '\'content\'', card['number'], '\'title\''],            [card['elements']['innerElements']['title']]);    };    modale['elements']['innerElements']['columnTitle'].onclick = function () {        openFormModif(this,[column['number'], '\'name\''],[column['elements']['innerElements']['title']]);    };    modale['elements']['innerElements']['description'].onclick = function () {        openFormModif(this,[column['number'], '\'content\'', card['number'], '\'description\''],            [card['elements']['innerElements']['description']]);    };}function addModale(card, column){    var modale = initModale(card, column);    document.querySelector('.shelf').appendChild(modale['elements']['domElement']);    linkModaleOnclickEvent(modale,card, column);    return modale;}//beginning of functions to add a cardfunction createElementsForCard() {    var newCard = createElementWithClass('div',['card']);//TODO! change style(div.box became div.card)    //TODO give this box the good innerhtml.    var cardTitle = createElementWithClass('h2',['cardTitle']);    var cardDescription = createElementWithClass('p', ['boxDescription']);    return {'domElement' : newCard, 'innerElements' : {'title' : cardTitle, 'description' : cardDescription}};}function linkCardOnclickEvent(card, column){    card['elements']['domElement'].addEventListener('click',function () {        addModale(card, column);    }, true);}function initCard(cardNumber) {    var card = {};    card['elements'] = createElementsForCard();    card['number'] = cardNumber;    return card;}//end of functions for adding cardsfunction addCard(column,cardNumber) {    var card = initCard(cardNumber);    var containerBox = column['elements']['innerElements']['container'];    //we created the var    card['elements']['domElement'].appendChild(card['elements']['innerElements']['title']);    containerBox.appendChild(card['elements']['domElement']);    linkCardOnclickEvent(card,column);    return card;}//CARD CREATIONfunction createElementsForColumn(columnName){    var column = createElementWithClass('div', ['column']);    var title = createElementWithClass('h3', ['title']);    columnName = formatString(columnName);    title.innerHTML = columnName;    var container = createElementWithClass('div', ['containerCard']);    var button = createElementWithClass('input', ['addBox']);    button.type = 'button';    button.value = 'add a box';    return {'domElement' : column, 'innerElements' : {'title' : title, 'container' : container, 'button': button}};}function displayElements(elements){    appendChilds(elements['domElement'],elements['innerElements']);    document.querySelector('.shelf').appendChild(elements['domElement']);}function createNewCard(column){    arrayColumn[column['number']]['content'].push({'title' : '', 'description': ''});    localStorage['content'] = JSON.stringify(arrayColumn);    //we update local storage    var card = addCard(column,arrayColumn[column['number']]['content'].length -1);    card['elements']['innerElements']['title'].innerHTML = '<span class="placehoder">click here to change your card title</span>';    card['elements']['innerElements']['description'].innerHTML = '<span class="placehoder">Your card doesn\'t has a description.' +        ' Click here to add it one!</span>';    card['elements']['domElement'].click();    //openFormModif(card['elements']['innerElements']['title'], '['+column['number']+']["content"]['+(arrayColumn[column['number']]['content'].length -1)+']["title"]');}function linkColumnOnclickEvent(column) {    column['elements']['innerElements']['title'].addEventListener('click',function () {        openFormModif(this,[column['number'], 'name']);    }, true);    column['elements']['innerElements']['button'].onclick = function () {        createNewCard(column);    };}function initColumn(columnName,columnNumber){    var column = {};    column['elements'] = createElementsForColumn(columnName);    column['number'] = columnNumber;    return column;}//functions for column creationfunction addColumn(columnName,columnNumber) {//possibly to be changed if Antoine prefers another selector.    var column = initColumn(columnName,columnNumber);    displayElements(column['elements']);    //we link to each column its unique id, the corresponding domElement and an array of the elements into this column    linkColumnOnclickEvent(column);    return column;}//END OF COLUMN CREATIONfunction displayContent(arrayColumn) {//TODO!!! IMPORTANT! Implement this function so it shows the page as it was left.    for (var i in arrayColumn){        var column = addColumn(arrayColumn[i]['name'],i);        for (var j in arrayColumn[column['number']]['content']){            addCard(column,j);        }    }}var arrayColumn = [];window.onload = function(){    if (typeof localStorage['content'] !== 'undefined'){        if (typeof JSON.parse(localStorage['content']) === 'object'){            arrayColumn = JSON.parse(localStorage['content']);            console.log(arrayColumn);            displayContent(arrayColumn);        }    }    //We display the content with what was stocked in the local storage.    var addAColumn = document.getElementById('addColumn');    addAColumn.onclick = function(){        var name = document.getElementById('columnName').value;        arrayColumn.push({'name': name, 'content': []});        localStorage['content'] = JSON.stringify(arrayColumn);        addColumn(name,arrayColumn.length -1);        document.getElementById('columnName').value = '';    }};